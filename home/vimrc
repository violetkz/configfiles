"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Ver: 0.07              2008-04-08 13:32:32 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => system
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("win32")
	set gfn=Lucida\ Console:h11.5:w6
	set gfw=Simsun\ (Founder\ Extended):h11.5:w6
	behave mswin
	colorscheme asu1dark
	map <F3>  :set gfw=MS\ Gothic:h11<CR>
	map <F4>  :set gfw=Simsun\ (Founder\ Extended):h12:w6<CR>
    lang mes en_gb.utf-8
endif 

if has("unix")
    lang mes C

    if has("gui_running")
        set guioptions-=a
        set guioptions-=T
        "set lines=85
        "et columns=105
        "set guifont=Monospace\ 10.5
        "set guifontwide=pmingliu\ 11.6
        set guifont=Lucida\ Console\ 10
        "set guifontwide=nsimsun\ 10
        set guifontwide=WenQuanYi\ Micro\ Hei\ Mono\ 10
        "set gfn=Monospace\ 10
        "colorscheme borland
        colorscheme desert
        map <F5>  :set gfn=Courier\ New\ 10<CR>
    else
        "colorscheme blue
        colorscheme default

    endif
endif 


syntax on                   "Enable syntax hl
filetype plugin on
filetype indent on

set langmenu=en_gb.utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese

if has("win32")             "set swapfile and backupfile directory. the more to 
    set dir=C:\\temp//      "set ':h dir' or ':h E303'
    set backupdir=C:\\temp//        
else
    set dir=/tmp 
    set backupdir=/tmp 
endif

set ambiwidth=double
set history=400             "Sets how many lines of history VIM har to remember
set ffs=unix,dos            "Favorite filetype

set nobackup        " no backup file
set nowb
set noswapfile      " no swap file
set noar

set autoread        "Set to auto read when a file is changed from the outside
set mouse=a         "Have the mouse enabled all the time:
set showcmd         "display incomplete command

set fen             "Enable folding, I find it very useful
set fdl=0           "set foldmethod=indent

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set backspace=2
set smarttab
set textwidth=80

set lbr
set tw=500


" => Indent
set ai              "Auto indent
set si              "Smart indet
set cindent         "C-style indenting
set wrap            "Wrap line
set so=3            "Set 7 lines to the curors - when moving vertical..
set wildmenu        "Turn on WiLd menu 启用匹配列表
set ruler           "Always show current position
set cmdheight=2     "The commandbar is 2 high
set nu              "Show line number
"set lz              "Do not redraw, when running macros.. lazyredraw
set hid             "Change buffer - without saving
set backspace=eol,start,indent   "Set backspace :help i_backspcing
set whichwrap+=<,>,h,l           "Bbackspace and cursor keys wrap to
set smartcase        "Ignore case when searching
set incsearch
set magic            "Set magic on
set noerrorbells     "No sound on errors.
set novisualbell
set t_vb=
set showmatch        "show matching bracet
set mat=4            "How many tenths of a second to blink
set hlsearch         "Highlight search thing

"set switchbuf=usetab  "
"set stal=2            " 1. always show talbar

"use the chinese help docment after installed it.
set rtp+=/usr/share/vim/vimfiles 
if version >= 603
	set helplang=cn
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM Generic userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set auto change to directory of file in buffer
"set autochdir 

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"Fast saving
nmap <leader>w :w!<cr>

"GUI window size
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>useful key
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map space to / and c-space to ?
map <space> /
map <c-space> ?
"Map tab to / and c-space to ?
map <TAB> :
" backspace in Visual mode deletes selection
vnoremap <BS> d

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
if has("Win32")
    map <C-V>		"+gP
    cmap <C-V>		<C-R>+
    " Use CTRL-Q to do what CTRL-V used to do
    noremap <C-Q>		<C-V>
endif

map <S-Insert>		"+gP
cmap <S-Insert>		<C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.

exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

imap <S-Insert>		<C-V>
vmap <S-Insert>		<C-V>


" Use CTRL-S for saving, also in Insert mode
noremap <C-S>		:update<CR>
vnoremap <C-S>		<C-C>:update<CR>
inoremap <C-S>		<C-O>:update<CR>

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fileformat
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
"Always hide the statusline"总是显示状态行
set laststatus=2

function! CurDir()
	let curdir = substitute(getcwd(), '/home/violet/', "~/", "g")
	return curdir
endfunction

"Format the statusline
set statusline=
set statusline+=%f "path to the file in the buffer, relative to current directory
set statusline+=\ %h%1*%m%r%w%0* " flag
set statusline+=\ [%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&fileencoding}, " encoding
set statusline+=%{&fileformat}] " file format
set statusline+=\ CWD:%r%{CurDir()}%h
set statusline+=\ Pos:%l-%c[%L]

""""""""""""""""""""""""""""""
" => Visual
""""""""""""""""""""""""""""""
" From an idea by Michael Naumann
"function! VisualSearch(direction) range
"	let l:saved_reg = @"
"	execute "normal! vgvy"
"	let l:pattern = escape(@", '\/.*$^~[]')
"	let l:pattern = substitute(l:pattern, " $", "", "")
"	if a:direction == 'b'
"		execute "normal ?" . l:pattern . "^M"
"	else
"		execute "normal /" . l:pattern . "^M"
"	endif
"	let @/ = l:pattern
"endfunction
"
""Basically you press * or # to search for the current selection !! Really useful
"vnoremap <silent> * :call VisualSearch('f')<CR>
"vnoremap <silent> # :call VisualSearch('b')<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around and tab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Smart way to move btw. window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"Actually, the tab does not switch buffers, but my arrow
"Bclose function ca be found in "Buffer related" section
map <leader>bd :Bclose<cr>
"#001 map <down> <leader>bd
"Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

"Moving fast to front, back and 2 sides ;)
imap <m-$> <esc>$a
imap <m-0> <esc>0i

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Autocommand
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Switch to current dir
"map <leader>cd :cd %:p:h<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $w <esc>`>a"<esc>`<i"<esc>

"Map auto complete of (, ", ', [
"http://www.vim.org/tips/tip.php?tip_id=153
"自动补齐括号
"
"ino ( ()<esc>:let leavechar=")"<cr>i
"ino { {}<esc>:let leavechar="}"<cr>i
"ino $q ''<esc>:let leavechar="'"<cr>i
"ino $w ""<esc>:let leavechar='"'<cr>i
"imap <c-l> <esc>:exec "normal f" . leavechar<cr>a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrev
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Comment for C like language
if has("autocmd")
	au BufNewFile,BufRead *.h,*.cpp,*.c,*.hpp ino $c /**<cr> **/<esc>O
endif

"My information
ia xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
"iab xname Amir Salihefendic

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings etc.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

"Move a line of text using control
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-line config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Cwd()
	let cwd = getcwd()
	return "e " . cwd 
endfunc

func! DeleteTillSlash()
	let g:cmd = getcmdline()
	if has("unix")
		let g:cmd_edited = substitute(g:cmd, "\(.*[/]\).*", "\1", "")
	else
		let g:cmd_edited = substitute(g:cmd, "\(.*[\\]\).*", "\1", "")
	endif
	if g:cmd == g:cmd_edited
		if has("unix")
			let g:cmd_edited = substitute(g:cmd, "\(.*[/]\).*/", "\1", "")
		else
			let g:cmd_edited = substitute(g:cmd, "\(.*[\\]\).*[\\]", "\1", "")
		endif
	endif 
	return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
	return a:cmd . " " . expand("%:p:h") . "/"
endfunc

cno $q <C->eDeleteTillSlash()<cr>
cno $c e <C->eCurrentFileDir("e")<cr>
cno $tc <C->eCurrentFileDir("tabnew")<cr>
cno $th tabnew ~/
cno $td tabnew ~/Desktop/

"Bash like
cno <C-A> <Home>
cno <C-E> <End>
cno <C-K> <C-U>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffer realted
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Fast open a buffer by search for a name
"map <c-q> :sb 

"Open a dummy buffer for paste
map <leader>q :e ~/buffer<cr>

"Restore cursor to file position in previous editing session
set viminfo='10,"100,:20,%,n~/.viminfo

" Buffer - reverse everything ... :)
map <F9> ggVGg?

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()

function! <SID>BufcloseCloseIt()
	let l:currentBufNum = bufnr("%")
	let l:alternateBufNum = bufnr("#")

	if buflisted(l:alternateBufNum)
		buffer #
	else
		bnext
	endif

	if bufnr("%") == l:currentBufNum
		new
	endif

	if buflisted(l:currentBufNum)
		execute "bdelete! ".l:currentBufNum
	endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>sn ]
map <leader>sp [
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" => File explorer
""""""""""""""""""""""""""""""
"Split vertically
let g:explVertical=1

"Window size
let g:explWinSize=35

let g:explSplitLeft=1
let g:explSplitBelow=1

"Hide some file
let g:explHideFiles='^.,.*.class$,.*.swp$,.*.pyc$,.*.swo$,.DS_Store$'

"Hide the help thing..
let g:explDetailedHelp=0

""""""""""""""""""""""""""""""
" => grep				   {{{ 
"""""""""""""""""""""""""""""
if has("Win32")
    let g:Grep_Path='C:\my_tools\grep\grep.exe'
endif


""""""""""""""""""""""""""""""
" => Minibuffer
""""""""""""""""""""""""""""""
let g:miniBufExplMaxSize = 0 "以水平窗口显示
let g:miniBufExplSplitToEdge = 0
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 2 "在有4个Buffer时，显示minibuffer窗口
let g:miniBufExplModSelTarget = 0 
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplSplitBelow=1

let g:bufExplorerSortBy = "name"


""""""""""""""""""""""""""""""
" => Tag list (ctags) - not used
""""""""""""""""""""""""""""""
let Tlist_Ctags_Cmd = "ctags"
let Tlist_Sort_Type = "name"
let Tlist_Show_Menu = 1
map <leader>t :Tlist<cr>

""""""""""""""""""""""""""""""
" => omnicppcomplete
""""""""""""""""""""""""""""""
"For STL.
let OmniCpp_DefaultNamespaces=["std","_GLIBCXX_STD"] 
"不显示preview窗口
set completeopt-=preview 
"=========================END

""""""""""""""""""""""""""""""
" => VIM
""""""""""""""""""""""""""""""
if has("autocmd")
	au BufRead,BufNew *.vim map <buffer> <leader><space> :w!<cr>:source %<cr>
endif

""""""""""""""""""""""""""""""
" => CPP
""""""""""""""""""""""""""""""
if has("win32")
au BufNewFile,BufRead *.cpp,*.h,*.c,*.cxx,*.hpp set makeprg=C:\\MingGW\\bin\\mingw32-make.exe
endif
au BufNewFile,BufRead *.cpp,*.h,*.c,*.cxx,*.hpp set errorformat=%f:%l:\%m


""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
"Run the current buffer in python - ie. on leader+space
"au BufNewFile,BufRead *.py so ~/vim_local/syntax/python.vim
"au BufNewFile,BufRead *.py map <buffer> <leader><space> :w!<cr>:!python %<cr>
"au BufNewFile,BufRead *.py so ~/vim_local/plugin/python_fold.vim

"Set some bindings up for 'compile' of python
"au BufNewFile,BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;sys.stderr=sys.stdout;py_compile.compile(r'%')\"
if has("win32")
    au BufNewFile,BufRead *.py set makeprg=C:\\Python25\\python\ % 
else
    au BufNewFile,BufRead *.py set makeprg=python\ % 
endif
"au BufNewFile,BufRead *.py set efm=%C\ %.%#,%A\ File\ "%f"\, line %l%.%#,%Z%[%^ ]%\@=%m
au BufNewFile,BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
au BufNewFile,BufRead *.py nmap <buffer> <F8> :w!<cr>:make<cr>:cl<cr>

""Python iMap
"au BufNewFile,BufRead *.py set cindent
"au BufNewFile,BufRead *.py ino <buffer> $r return 
"au BufNewFile,BufRead *.py ino <buffer> $s self 
"au BufNewFile,BufRead *.py ino <buffer> $c ##<cr>#<space><cr>#<esc>kla
"au BufNewFile,BufRead *.py ino <buffer> $i import 
"au BufNewFile,BufRead *.py ino <buffer> $p print 
"au BufNewFile,BufRead *.py ino <buffer> $d """<cr>"""<esc>O

"Run in the Python interpreter
function! Python_Eval_VSplit() range
 let src = tempname()
 let dst = tempname()
 execute ": " . a:firstline . "," . a:lastline . "w " . src
 execute ":!python " . src . " > " . dst
 execute ":pedit! " . dst
endfunction
au BufNewFile,BufRead *.py vmap <F7> :call Python_Eval_VSplit()<cr> 

"""""""""""""""""""""""""""""""
" =>set abbreviaton 设定缩写
"""""""""""""""""""""""""""""""
if has("eval") && has("autocmd")
	fun! <SID>abbrev_cpp()
		iabbrev <buffer> cci const_iterator
		iabbrev <buffer> ccl cla
		iabbrev <buffer> cco const
		iabbrev <buffer> cdb \bug
		iabbrev <buffer> cde \throw
		iabbrev <buffer> cdf /** \file<CR><CR>/<Up>
		iabbrev <buffer> cdg \ingroup
		iabbrev <buffer> cdn /** \namespace<CR><CR>/<Up>
		iabbrev <buffer> cdp \param
		iabbrev <buffer> cdt \test
		iabbrev <buffer> cdx /**<CR><CR>/<Up>
		iabbrev <buffer> cit iterator
		iabbrev <buffer> cns namespace
		iabbrev <buffer> cpr protected
		iabbrev <buffer> cpu public
		iabbrev <buffer> cpv private
		iabbrev <buffer> csl std::list
		iabbrev <buffer> csm std::map
		iabbrev <buffer> css std::string
		iabbrev <buffer> csv std::vector
		iabbrev <buffer> cty typedef
		iabbrev <buffer> cun using namespace
		iabbrev <buffer> ckk {<CR>}<Up><Tab>
		iabbrev <buffer> cvi virtual
		iabbrev <buffer> #i #include
		iabbrev <buffer> #d #define
        inoremap #m <esc>:r $HOME/.vim/template/c.txt<CR>
	endfun

    fun! <SID>abbrev_shell()
		iabbrev <buffer> #! #!/bin/env bash<esc>o<esc>cc<esc>
    endfun

	fun! <SID>abbrev_python()
		iabbrev <buffer> #! #!/bin/env python<CR>#-*- coding:utf-8 -*-<CR><CR>
		iabbrev <buffer> #i import 
		iabbrev <buffer> #p print
		iabbrev <buffer> #m if __name__=="__main__":

	endfun

	augroup abbreviation
		autocmd!
		autocmd FileType cpp,c :call <SID>abbrev_cpp()
		autocmd FileType python :call <SID>abbrev_python()
		autocmd FileType sh :call <SID>abbrev_shell()
	augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remove the Windows ^M
noremap <Leader>m :%s/\r//g<CR>

"Paste toggle - when pasting something in, don't indent.
"set pastetoggle=<F3>

"Remove indenting on empty line
map <F2> :%s/s*$//g<cr>:noh<cr>''


"--数据递增函数
let g:I=0
function! INC(increment)
	let g:I =g:I + a:increment
	return g:I
endfunction 

if has("win32")
    " cscope 设定.see :h cscope
    if has("cscope")
            set csprg=cscope
            set csto=0
            set cst
            set nocsverb
            " add any database in current directory
            if filereadable("cscope.out") && !has("gui_running")
                cs add cscope.out
            " else add database pointed to by environment
            elseif filereadable("cscope.out")
                map <leader>ca :cs add cscope.out<CR>
            endif
            set csverb
    endif
else
    set cst
    set csverb
endif
