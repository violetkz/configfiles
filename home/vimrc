
" =============================================================================
"                   Config file for my VIM 
" =============================================================================

if has("win32")
    "behave mswin
    lang mes en_gb.utf-8
    "In my Win10, the following setting don't work. shit ~~~"
    "       lang mes en
    "       lang en
    "So, I copy and overwrite the *.mo file from $VIM/lang/en_GB to $VIM/lang/zh_cn* "
    "or may delete the folders under $VIM/lang/zh_cn* "
    
endif 


if has("unix")
    lang mes C
endif

" the setting for GUI
if has("gui_running")
    set guioptions-=a  
    set guioptions-=T

    set lines=46
    set columns=105

    if has("win32") 
        "set gfn=Courier_New:h12:w7
        "set gfn=Lucida_Console:h11:w6.3
        set gfn=Lucida_Console:h11:w6.3
    endif

    if has("unix")
        set gfn=Lucida\ Console\ 10
    endif

    set langmenu=en_gb.utf-8 "set menu language with en
endif

"according to different file type to set different color scheme.
au BufRead,BufNew,BufAdd,BufEnter *.adoc,*.asciidoc colo Baycomb
"au FileType asciidoc colo Baycomb
au BufRead,BufNew,Bufadd,BufEnter *.c,*.cpp,*.h,*.hpp colo vc
"au BufRead,BufNew,Bufadd,BufEnter *.py colo molokai
"au BufRead,BufNew,Bufadd,BufEnter *.py set gfn=Courier_New:h11.6
au BufRead,BufNew,Bufadd *.py colo Nuvola 
au BufRead,BufNew,Bufadd,BufEnter *.xjob set ft=xjob
au FileType python colo Nuvola 
"au FileType python set gfn=Courier_New:h11.6
"au BufRead,BufNew,Bufadd *.py colo eclipse 
"au FileType c,cpp colo vc
au FileType None  colo default



syntax on                   "Enable syntax hl
filetype plugin on
filetype indent on

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese

if has("win32")             "set swapfile and backupfile directory. the more to 
    set dir=C:\\temp//      "set ':h dir' or ':h E303'
    set backupdir=C:\\temp//        
else
    set dir=/tmp 
    set backupdir=/tmp 
endif

set ambiwidth=double
set history=400             "Sets how many lines of history VIM har to remember
set ffs=unix,dos            "Favorite filetype

set nobackup        " no backup file
set nowb
set noswapfile      " no swap file
set noar

set autoread        "Set to auto read when a file is changed from the outside
set mouse=a         "Have the mouse enabled all the time:
set showcmd         "display incomplete command

set fen             "Enable folding, I find it very useful
set fdl=0           "set foldmethod=indent

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set backspace=2
set smarttab
set textwidth=80

set lbr
set tw=500


" => Indent
set ai              "Auto indent
"set si              "Smart indent
set cindent              "Smart indent
set wrap            "Wrap line
set so=3            "Set 7 lines to the curors - when moving vertical..
set wildmenu        "Turn on Wild menu 
set ruler           "Always show current position
set cmdheight=2     "The commandbar is 2 high
set nu              "Show line number
"set lz              "Do not redraw, when running macros.. lazyredraw
set hid             "Change buffer - without saving
set backspace=eol,start,indent   "Set backspace :help i_backspcing
set whichwrap+=<,>,h,l           "Bbackspace and cursor keys wrap to
set magic            "Set magic on
set noerrorbells     "No sound on errors.
set novisualbell    
set t_vb=
set showmatch        "show matching bracet
set mat=4            "How many tenths of a second to blink
set hlsearch         "Highlight search thing
set cm=blowfish      "set crpto method as blowfish

" => search options
set ignorecase      "Ignore case when searching
set smartcase       "Override the 'ignorecase' option if search pattern contains upper characters
set incsearch

"set switchbuf=usetab  "
"set stal=2            " 1. always show talbar

"use the chinese help docment after installed it.
set rtp+=/usr/share/vim/vimfiles 
if version >= 603
    set helplang=cn
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM Generic userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set auto change to directory of file in buffer
"set autochdir 

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"Fast saving
nmap <leader>w :w!<cr>

"GUI window size
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>useful key
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map space to / and c-space to ?
map <space> /
map <c-space> ?
"Map tab to / and c-space to ?
map <TAB> :
" backspace in Visual mode deletes selection
vnoremap <BS> d

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
if has("Win32")
    map <C-V>		"+gP
    cmap <C-V>		<C-R>+
    " Use CTRL-Q to do what CTRL-V used to do
    noremap <C-Q>		<C-V>
endif

map <S-Insert>		"+gP
cmap <S-Insert>		<C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.

exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

imap <S-Insert>		<C-V>
vmap <S-Insert>		<C-V>


" Use CTRL-S for saving, also in Insert mode
noremap <C-S>		:update<CR>
vnoremap <C-S>		<C-C>:update<CR>
inoremap <C-S>		<C-O>:update<CR>

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fileformat
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
"Always hide the statusline
set laststatus=2

function! CurDir()
    let curdir = substitute(getcwd(), '/home/violet/', "~/", "g")
    return curdir
endfunction

"Format the statusline
set statusline=
set statusline+=%f "path to the file in the buffer, relative to current directory
set statusline+=\ %h%1*%m%r%w%0* " flag
set statusline+=\ [%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&fileencoding}, " encoding
set statusline+=%{&fileformat}] " file format
set statusline+=\ CWD:%r%{CurDir()}%h
set statusline+=\ Pos:%l-%c[%L]


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around and tab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Smart way to move btw. window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"Actually, the tab does not switch buffers, but my arrow
"Bclose function ca be found in "Buffer related" section
map <leader>bd :Bclose<cr>
"#001 map <down> <leader>bd
"Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

"Moving fast to front, back and 2 sides ;)
imap <m-$> <esc>$a
imap <m-0> <esc>0i

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Autocommand
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Switch to current dir
"map <leader>cd :cd %:p:h<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $w <esc>`>a"<esc>`<i"<esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrev
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Comment for C like language
if has("autocmd")
    au BufNewFile,BufRead *.h,*.cpp,*.c,*.hpp ino $c /**<cr> **/<esc>O
endif

"My information
ia xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
"iab xname Amir Salihefendic

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings etc.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

"Move a line of text using control
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-line config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Cwd()
    let cwd = getcwd()
    return "e " . cwd 
endfunc

func! DeleteTillSlash()
    let g:cmd = getcmdline()
    if has("unix")
        let g:cmd_edited = substitute(g:cmd, "\(.*[/]\).*", "\1", "")
    else
        let g:cmd_edited = substitute(g:cmd, "\(.*[\\]\).*", "\1", "")
    endif
    if g:cmd == g:cmd_edited
        if has("unix")
            let g:cmd_edited = substitute(g:cmd, "\(.*[/]\).*/", "\1", "")
        else
            let g:cmd_edited = substitute(g:cmd, "\(.*[\\]\).*[\\]", "\1", "")
        endif
    endif 
    return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
    return a:cmd . " " . expand("%:p:h") . "/"
endfunc

cno $q <C->eDeleteTillSlash()<cr>
cno $c e <C->eCurrentFileDir("e")<cr>
cno $tc <C->eCurrentFileDir("tabnew")<cr>
cno $th tabnew ~/
cno $td tabnew ~/Desktop/

"Bash like
cno <C-A> <Home>
cno <C-E> <End>
cno <C-K> <C-U>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffer realted
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Fast open a buffer by search for a name
"map <c-q> :sb 

"Open a dummy buffer for paste
map <leader>q :e ~/buffer<cr>

"Restore cursor to file position in previous editing session
set viminfo='10,"100,:20,%,n~/.viminfo

" Buffer - reverse everything ... :)
map <F9> ggVGg?

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()

function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute "bdelete! ".l:currentBufNum
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>sn ]
map <leader>sp [
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" => File explorer
""""""""""""""""""""""""""""""
"Split vertically
let g:explVertical=1

"Window size
let g:explWinSize=35

let g:explSplitLeft=1
let g:explSplitBelow=1

"Hide some file
let g:explHideFiles='^.,.*.class$,.*.swp$,.*.pyc$,.*.swo$,.DS_Store$'

"Hide the help thing..
let g:explDetailedHelp=0

""""""""""""""""""""""""""""""
" => grep				   {{{ 
"""""""""""""""""""""""""""""
if has("Win32")
    let g:Grep_Path='C:\my_tools\grep\grep.exe'
endif


""""""""""""""""""""""""""""""
" => Minibuffer
""""""""""""""""""""""""""""""
let g:miniBufExplMaxSize = 0 "horizontal window
let g:miniBufExplSplitToEdge = 0
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 2 "show the window while > 4 buffers.
let g:miniBufExplModSelTarget = 0 
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplSplitBelow=1

let g:bufExplorerSortBy = "name"


""""""""""""""""""""""""""""""
" => Tag list (ctags) - not used
""""""""""""""""""""""""""""""
let Tlist_Ctags_Cmd = "ctags"
let Tlist_Sort_Type = "name"
let Tlist_Show_Menu = 1
map <leader>t :Tlist<cr>


""""""""""""""""""""""""""""""
" => VIM
""""""""""""""""""""""""""""""
if has("autocmd")
    au BufRead,BufNew *.vim map <buffer> <leader><space> :w!<cr>:source %<cr>
endif

""""""""""""""""""""""""""""""
" => CPP
""""""""""""""""""""""""""""""
if has("win32")
    au BufNewFile,BufRead *.cpp,*.h,*.c,*.cxx,*.hpp set makeprg=C:\\MingGW\\bin\\mingw32-make.exe
endif
au BufNewFile,BufRead *.cpp,*.h,*.c,*.cxx,*.hpp set errorformat=%f:%l:\%m


"""""""""""""""""""""""""""""""
" =>set abbreviaton 
"""""""""""""""""""""""""""""""
if has("eval") && has("autocmd")
    fun! <SID>abbrev_cpp()
        iabbrev <buffer> cci const_iterator
        iabbrev <buffer> ccl cla
        iabbrev <buffer> cco const
        iabbrev <buffer> cdb \bug
        iabbrev <buffer> cde \throw
        iabbrev <buffer> cdf /** \file<CR><CR>/<Up>
        iabbrev <buffer> cdg \ingroup
        iabbrev <buffer> cdn /** \namespace<CR><CR>/<Up>
        iabbrev <buffer> cdp \param
        iabbrev <buffer> cdt \test
        iabbrev <buffer> cdx /**<CR><CR>/<Up>
        iabbrev <buffer> cit iterator
        iabbrev <buffer> cns namespace
        iabbrev <buffer> cpr protected
        iabbrev <buffer> cpu public
        iabbrev <buffer> cpv private
        iabbrev <buffer> csl std::list
        iabbrev <buffer> csm std::map
        iabbrev <buffer> css std::string
        iabbrev <buffer> csv std::vector
        iabbrev <buffer> cty typedef
        iabbrev <buffer> cun using namespace
        iabbrev <buffer> ckk {<CR>}<Up><Tab>
        iabbrev <buffer> cvi virtual
        iabbrev <buffer> #i #include
        iabbrev <buffer> #d #define
        inoremap #m <esc>:r $HOME/.vim/template/c.txt<CR>
    endfun

    fun! <SID>abbrev_shell()
        iabbrev <buffer> #! #!/bin/env bash<esc>o<esc>cc<esc>
    endfun

    fun! <SID>abbrev_python()
        iabbrev <buffer> #! #!/bin/env python<CR>#-*- coding:utf-8 -*-<CR><CR>
        iabbrev <buffer> #i import 
        iabbrev <buffer> #p print
        iabbrev <buffer> #m if __name__=="__main__":

    endfun

    augroup abbreviation
        autocmd!
        autocmd FileType cpp,c :call <SID>abbrev_cpp()
        autocmd FileType python :call <SID>abbrev_python()
        autocmd FileType sh :call <SID>abbrev_shell()
    augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remove the Windows ^M
noremap <Leader>m :%s/\r//g<CR>

"Paste toggle - when pasting something in, don't indent.
"set pastetoggle=<F3>

"Remove indenting on empty line
map <F2> :%s/s*$//g<cr>:noh<cr>''


"-- inc function
let g:I=0
function! INC(increment)
    let g:I =g:I + a:increment
    return g:I
endfunction 

if has("win32")
    " cscope setup .see :h cscope
    if has("cscope")
        set csprg=cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out") && !has("gui_running")
            cs add cscope.out
            " else add database pointed to by environment
        elseif filereadable("cscope.out")
            map <leader>ca :cs add cscope.out<CR>
        endif
        set csverb
    endif
else
    set cst
    set csverb
endif



function! IsNeedCompleteFileType()
    let file_suffix = expand('%:e')
    let need_support_comeplete_list = ['c', 'cpp', 'py', 'h', 'cxx', 'hpp']
    "let need_support_comeplete_list = ['c', 'cpp', 'h', 'cxx', 'hpp']
    if index(need_support_comeplete_list, file_suffix) != -1
        return 1
    endif
    return 0
endfunction

" =============================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
if has("Win32")
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim
    call vundle#begin('$VIM/vimfiles/bundle')
endif
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'fholgado/minibufexpl.vim'

Plugin 'a.vim'

Plugin 'skywind3000/asyncrun.vim'

if IsNeedCompleteFileType() == 1
    Plugin 'Valloric/YouCompleteMe'
endif

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

""Don't show preview window
"set previewheight=4
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_autoclose_preview_window_after_completion = 1

let g:ycm_confirm_extra_conf = 0
let g:syntastic_always_populate_loc_list = 1
let g:ycm_filetype_specific_completion_to_disable = {'text':1, 'help':1, 'gitcommit':1, 'none':1}
let g:ycm_complete_in_comments = 1
let g:ycm_key_invoke_completion = '<S-Space>'
let g:ycm_show_diagnostics_ui = 1
let g:ycm_enable_diagnostic_signs = 0

